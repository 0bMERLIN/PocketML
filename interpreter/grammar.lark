
?start: expr
?expr: op0

%%%OPERATOR_TABLE%%%

// lambdas and lambda-case
?atom:  "\\" "case" lamcases -> lamcase
    | "\\" patternatom+ "->" expr -> lam
    | atom1
    | atom atom1 -> app

// statement expressions like let, if, etc.
?atom1: atom2 "." NAME -> access
    | "do" "{" _sep{expr, ";"}  (";")?"}" -> do
    | "import" import_module_path import_list? import_as? ";" expr -> _import
    | "module" "(" ("*" | _sep{export, ","}) ")" -> module // no empty modules allowed!
    | "case" expr "|" _sep{case, "|"} -> match
    | "if" expr "then" expr ("else" expr)? -> ite
    | "let" "rec" NAME patternatom* "=" expr ";" expr -> letrec
    | "let" NAME patternatom* "=" expr ";" expr -> let
    | "let" NAME ":" type ";" expr -> letdecl
    | "data" NAME NAME* "=" constructors ";" expr -> typedef
    | "data" NAME NAME* ";" expr -> typedecl
    | "type" NAME NAME* "=" type ";" expr -> typealias
    | /%%%(.|[\n])+%%%/ ";" expr -> python
    | atom2

// literals, variables and expressions in parentheses
?atom2: "@(" nparrayelems ")" -> nparray
    | "(" tupleelems ")" -> _tuple
    | "[" listelems "]" -> list
    | none_expr -> none
    | NAME -> var
    | "(" expr ")"
    | NUMBER -> num
    | (STRING) -> string
    | /%%(.|[\n])+%%/ -> inlinepython
    | "{" entry ("," entry)* "}" -> record


// helper expressions
tupleelems: expr "," (expr ("," expr)*)?
listelems: expr ("," expr)* |
nparrayelems: expr ("," expr)*

import_list: "(" _sep{import_item, ","} ")"
?import_item: "type" NAME -> typeimport | NAME -> valueimport
import_as: "as" UPPERNAME
import_module_path: _sep{NAME, "."}

lamcases: _sep{case, "|"}
none_expr: "(" ")"

// modules
?export: "type" NAME -> typeexport
    | NAME -> valueexport

// pattern matching
?case: pattern "->" expr

?pattern: pattern patternatom -> papp
    | patternatom
?patternatom: "_" -> pwildcard
    | LOWERNAME -> pvar
    | "(" tuplepelems ")" -> ptuple
    | "{" _sep{pentry, ","} "}" -> precord
    | "(" pattern ")"
    | NUMBER -> pnum
    | STRING -> pstr
    | pconstrname

?pentry: NAME "=" pattern -> pentry
    | LOWERNAME -> precordvar

tuplepelems: pattern "," (pattern ("," pattern)*)?

pconstrname: (NAME ".")? UPPERNAME

// records
entry: NAME "=" expr

constructors: _sep{constructor, "|"}
constructor: UPPERNAME typeatom1*

// types
?type: typearrow

?typearrow: typeapp "->" typearrow -> tfun
    | typeapp

?typeapp: typename typeatom1* -> ttyp
    | typeatom

?typeatom: LOWERNAME -> tvar
    | "(" ")" -> tunit
    | "(" tupletelems ")" -> ttuple
    | "(" type ")"
    | "{" tentry ("," tentry)* "}" -> trecord

?typeatom1: typeatom | typename -> ttyp

typename: (NAME ".")? UPPERNAME

tupletelems: typeatom1 "," (typeatom1 ("," typeatom1)*)?

tentry: NAME ":" type

// tokens & templates

_sep{x, sep}: x (sep x)*

UPPERNAME: /[A-Z]/(/[0-9]/*)(NAME?)
LOWERNAME: /[a-z]/(/[0-9]/*)(NAME?)

// python-like comments
COMMENT: /#.*/

// strings can be multiline
_STRING_INNER: /(.|[\n])*?/
_STRING_ESC_INNER: _STRING_INNER /(?<!\\)(\\\\)*?/

STRING : "\"" _STRING_ESC_INNER "\"" | "'" _STRING_ESC_INNER "'"

%ignore COMMENT
%ignore WS
%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS
